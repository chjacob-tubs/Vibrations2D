import numpy
import os
import openbabel

import VibTools


molname = 'water'
use_cosmo = None 
use_deuterium = None # change all hetero-hydrogen atoms to deuterium atoms

pyadfenv.options['save_results'] = True # saves the resoluts to folder


# TURBOMOLE SETTINGS : 
settings = TurbomoleGeometryOptimizationSettings(verbose_level=5)

# default settings: RI-DFT/BP
settings.set_basis_set('def2-SVP')
settings.set_dft_functional('b3-lyp')
settings.set_ri(False) # false for b3-lyp
settings.set_redundant_internal_coordinates(True)
settings.set_scfiterlimit(5000)
settings.set_max_iterations(5000)
settings.set_dft_grid('m4')
settings.set_convergence_criterion(5)
settings.set_dispersion_correction('dft-d3')

if use_cosmo:
    # cosmo settings for deuterium
    settings.set_cosmo(True)
    settings.set_cosmo_epsilon(77.49)
    settings.set_cosmo_rsolv(1.93)

mol = molecule(os.path.join(pyadfenv.outdir, '%s.xyz' %(molname)))
#mol.set_charge(1)


# The use_deuterium function needs a list of the hydrogen atoms that are supposed to be set as deuterium atoms. 
# In order to determine the hydrogens that are bound to hetero atoms (not carbon), get_hetero_hydrogen_list() is used.
het_h_list = None
if use_deuterium:
    het_h_list = mol.get_hetero_hydrogen_list()


# RUN THE TURBOMOLE JOB :
tm_res = TurbomoleGeometryOptimizationJob(mol, method='dft', settings=settings).run()

opt_mol = tm_res.get_molecule()
opt_mol.write(os.path.join(pyadfenv.outdir, '%s_opt.xyz' %(molname)))

opt_energy = tm_res.get_energy()
print("Final Total Energy: ", opt_energy)

opt_grad   = tm_res.get_gradient_vector()
print("Final Max Gradient: ", numpy.max(opt_grad))


# RUN THE SNF JOB :
if het_h_list:
    print("List of hydrogen atom that are set as deuterium: ", het_h_list)
    snf_results = SNFJob(tm_res,deuterium=het_h_list).run()
else:
    snf_results = SNFJob(tm_res).run()

# GET RESULTS :
wavenumbers = snf_results.get_wave_numbers()
print("SNF wavenumbers: ", wavenumbers)
intensities = snf_results.get_ir_ints()
print("    intensities: ", intensities)
dipoles = snf_results.get_vibs().get_tensor_deriv_nm('dipole')
print("        dipoles: ", dipoles)

# SAVE RESULTS :
numpy.savetxt(os.path.join(pyadfenv.outdir,'freqs.txt'), wavenumbers)
numpy.savetxt(os.path.join(pyadfenv.outdir,'inten.txt'), intensities)
numpy.savetxt(os.path.join(pyadfenv.outdir,'dipol.txt'), dipoles)