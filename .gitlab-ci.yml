variables:
  SCHEDULER_PARAMETERS: "-n 1 -p nitrogen"
  USER: legit
  VIBRA_HOME: $CI_BUILDS_DIR/$CI_PROJECT_PATH


stages:
    - build
    - test

before_script:
        - hostname
        - module load module_include_dir
        - . /usr/share/modules/init/bash
        - . /usr/share/modules/init/setup
        - export PYTHONPATH=$PYTHONPATH:$VIBRA_HOME/src
        - module load python/anaconda3-2021.11
        - source activate base
        - conda init bash
        - conda activate ci_vibrations
        - module load pyadf/master-20220201

check-requirements:
    tags:
        - nodes
    stage: build
    script:
        - hostname
        - module load module_include_dir
        - . /usr/share/modules/init/bash
        - . /usr/share/modules/init/setup
        - export PYTHONPATH=$PYTHONPATH:$VIBRA_HOME/src
        - module load python/anaconda3-2021.11
        - source activate base
        - conda activate ci_vibrations
        - module load pyadf/master-20220201

unittest-Calc2dir:
    tags:
        - nodes
    stage: test
    script:
        - cd src/Irspec2d/test/ 
        - pytest -v test_Calc2dir.py 
        - cd

unittest-spectra:
    tags:
        - nodes
    stage: test
    script:
        - cd src/Irspec2d/test/
        - pytest -v test_spectra.py
        - cd 

#variables:
#  SCHEDULER_PARAMETERS: "-n 12 -p nitrogen"
#stages:
#    - test
#
#unit_test:
#    tags:
#        - nodes
#    stage: test
#    script:
#        - hostname
#        - pytest


# This file is a template, and might need editing before it works on your project.
# To contribute improvements to CI/CD templates, please follow the Development guide at:
# https://docs.gitlab.com/ee/development/cicd/templates.html
# This specific template is located at:
# https://gitlab.com/gitlab-org/gitlab/-/blob/master/lib/gitlab/ci/templates/Getting-Started.gitlab-ci.yml

# This is a sample GitLab CI/CD configuration file that should run without any modifications.
# It demonstrates a basic 3 stage CI/CD pipeline. Instead of real tests or scripts,
# it uses echo commands to simulate the pipeline execution.
#
# A pipeline is composed of independent jobs that run scripts, grouped into stages.
# Stages run in sequential order, but jobs within stages run in parallel.
#
# For more information, see: https://docs.gitlab.com/ee/ci/yaml/index.html#stages

# stages:          # List of stages for jobs, and their order of execution
#   - build
#   - test
#   - deploy

# build-job:       # This job runs in the build stage, which runs first.
#   stage: build
#   script:
#     - echo "Compiling the code..."
#     - echo "Compile complete."

# unit-test-job:   # This job runs in the test stage.
#   stage: test    # It only starts when the job in the build stage completes successfully.
#   script:
#     - echo "Running unit tests... This will take about 60 seconds."
#     - sleep 60
#     - echo "Code coverage is 90%"

# lint-test-job:   # This job also runs in the test stage.
#   stage: test    # It can run at the same time as unit-test-job (in parallel).
#   script:
#     - echo "Linting code... This will take about 10 seconds."
#     - sleep 10
#     - echo "No lint issues found."

# deploy-job:      # This job runs in the deploy stage.
#   stage: deploy  # It only runs when *both* jobs in the test stage complete successfully.
#   script:
#     - echo "Deploying application..."
#     - echo "Application successfully deployed."
